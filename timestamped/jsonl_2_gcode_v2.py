#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
bm_to_gcode.py â€” Bambu-Bus JSONL to G-code Converter (Combined)

This script reads a .bm.jsonl file (generated by bm_parse_ts.py) and
reconstructs G-code commands from BOTH standard addressed packets and
the raw binary movement packets.

It serves as a validation tool to confirm the reverse-engineered packet formats
by creating a comprehensive, time-ordered log of bus activity.

Usage:
    python bm_to_gcode.py --infile your_capture.bm.jsonl --outfile reconstructed.gcode
"""

import argparse
import json
import struct
import sys
import os

def decode_movement_packet(payload_hex: str) -> str | None:
    """
    Decodes a '3b33' raw motor movement payload into a G-code string.
    """
    if not payload_hex.startswith("3b33") or len(payload_hex) < 26:
        return None

    try:
        data = bytes.fromhex(payload_hex)
        
        axis_mask = data[2]
        direction_flag = data[3]
        move_type_flag = data[4]
        
        distance = struct.unpack('<f', data[5:9])[0]
        velocity_mms = struct.unpack('<f', data[9:13])[0]
        feedrate = velocity_mms * 60

        command = "G1" if move_type_flag == 0 else "G0"
        axes = []
        sign = "-" if direction_flag == 1 else ""
        
        if axis_mask & 0x01: axes.append(f"X{sign}{distance:.3f}")
        if axis_mask & 0x02: axes.append(f"Y{sign}{distance:.3f}")
        if axis_mask & 0x04: axes.append(f"Z{sign}{distance:.3f}")
        if axis_mask & 0x08: axes.append(f"E{sign}{distance:.3f}")
            
        if not axes:
            return None

        return f"# >> Raw Movement Packet\n{command} {' '.join(axes)} F{feedrate:.1f}"

    except (struct.error, ValueError, IndexError):
        return None

def decode_standard_packet(frame: dict) -> str | None:
    """
    Decodes a standard packet, looking specifically for G-code payloads.
    """
    try:
        # PTYPE_GCODE is 0x0d (13)
        if frame.get("ptype") == 13:
            payload_hex = frame.get("payload_hex", "")
            if payload_hex:
                gcode_command = bytes.fromhex(payload_hex).decode('ascii', errors='ignore').strip()
                source = frame.get("source_name", "UNK")
                dest = frame.get("dest_name", "UNK")
                seq = frame.get("sequence", -1)
                
                # Add a comment to indicate it's a standard packet
                header_info = f"# Standard G-code Packet (seq:{seq}, {source}->{dest})"
                return f"{header_info}\n{gcode_command}"
        return None
    except (ValueError, IndexError):
        return None


def main():
    """Main execution function."""
    parser = argparse.ArgumentParser(description="Bambu-Bus JSONL to G-code Converter")
    parser.add_argument("--infile", required=True, help="Input .bm.jsonl file")
    parser.add_argument("--outfile", required=True, help="Output .gcode file")
    args = parser.parse_args()

    if not os.path.exists(args.infile):
        print(f"ERROR: Input file not found: {args.infile}", file=sys.stderr)
        sys.exit(1)

    print(f"Reading from: {args.infile}")
    print(f"Writing G-code to: {args.outfile}")

    reconstructed_count = 0
    with open(args.infile, 'r') as jsonl_file, open(args.outfile, 'w') as gcode_file:
        for line in jsonl_file:
            try:
                frame = json.loads(line)
                gcode_command = None
                
                # Check which type of packet it is and decode accordingly
                if frame.get("parser") == "standard_3d":
                    gcode_command = decode_standard_packet(frame)
                else: # Assumes crc_anchored_var for movement
                    payload = frame.get("payload_hex")
                    if payload:
                        gcode_command = decode_movement_packet(payload)

                if gcode_command:
                    gcode_file.write(gcode_command + "\n\n") # Add extra newline for readability
                    reconstructed_count += 1

            except json.JSONDecodeError:
                print(f"Warning: Skipping malformed JSON line: {line.strip()}", file=sys.stderr)
                continue
    
    print(f"\nConversion complete. Reconstructed {reconstructed_count} G-code and Movement commands.")

if __name__ == "__main__":
    main()
